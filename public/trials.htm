 <!doctype html>
<html>

  <head>
    <script type="text/javascript" src="js/raphael.js"></script>
    <title>Locations</title>
  </head>

  <body>
    <div id="container" style="font-size: 20px">
      <h2>Buscando un unicornio</h2>
      Da click en los cuadrados para decir si el unicornio está presente o ausente:
      <h5></h5>
      <div id="header">
        <span id="canvas_container" style="float: left; width: 45%; text-align: left;"></span>
      </div>
      <div style="clear:both;"></div>

      <div>
        <table>
          <tr>
            Mi decisión actual es que el unicornio está:
          </tr>
          <tr>
            <td><input type="button" value="Presente" name="CatA" id="submitPresent" class="btn" /></td>
            <td><input type="button" value="Ausente" name="CatB" id="submitAbsent" class="btn" /></td>
          </tr>
        </table>
        <input type="button" value="Somenter decisión final" name="DONE" id="DONE" class="btn" />
      </div>

      <div style="clear:both;"></div>

      <div>
        <table>
          <tr>
            <td>
              Tu decisión actual es:
            </td>
            <td>
              <span id="PlayersGuess" style="color: red;"></span>
            </td>
          </tr>
        </table>
      </div>

      <div style="clear:both;"></div>

      <div>
        <table>
          <tr>
            <td>
              La decisión actual de tu compañero es:
            </td>
            <td>
              <span id="PartnersGuess" style="color: red;"></span>
            </td>
          </tr>
        </table>
      </div>
      <div style="clear:both;"></div>

      <div>
        <span id='partners_status' style="color: green;"></span>
      </div>

    </div>

    <div id="container2" style="font-size: 20px;">
      <h2>Buscando un unicornio</h2>
      <h3>Tu respuesta es <span id="answer"></span></h3>
      <table class="tg">
        <tr>
          <th class="tg-yw4l">Obtienes</th>
          <th class="tg-yw4l"><span id="pointsC">XXX</span> puntos</th>
          <th class="tg-yw4l"> - </th>
          <th class="tg-yw4l"><span id="pointsA">YYY</span> puntos</th>
          <th class="tg-yw4l"> = </th>
          <th class="tg-yw4l"><span id="Score">AAA</span> puntos</th>
        </tr>
        <tr>
          <td class="tg-yw4l"></td>
          <td class="tg-yw4l">por</td>
          <td class="tg-yw4l"></td>
          <td class="tg-yw4l">por</td>
        </tr>
        <tr>
          <td class="tg-yw4l"></td>
          <td class="tg-yw4l">respuesta</td>
          <td class="tg-yw4l"></td>
          <td class="tg-yw4l">lugares</td>
        </tr>
        <tr>
          <td class="tg-yw4l"></td>
          <td class="tg-yw4l"><span id="correct_incorrect"></span></td>
          <td class="tg-yw4l"></td>
          <td class="tg-yw4l">comunes</td>
        </tr>
        <tr>
          <td class="tg-yw4l"></td>
          <td class="tg-yw4l">con</td>
        </tr>
        <tr>
          <td class="tg-yw4l"></td>
          <td class="tg-yw4l">unicornio</td>
        </tr>
        <tr>
          <td class="tg-yw4l"></td>
          <td class="tg-yw4l"><span id="with_without"></td>
        </tr>
      </table>
      <h3>Tú y tu compañero dieron click en los mismos cuadrados <span id="Joint" style="color: red";>BBB</span> vez(ces).</h3>
      <span id="canvas_container1"></span>
      <div style="clear:both;"></div>
      <input type="button" value="Ok, estoy listo para la próxima ronda!" name="DONE1" id="DONE1" class="btn" />
    </div>



  </body>


  <script type="text/javascript">


    window.onload = function() {

        if ('undefined' !== typeof window.paper) return;

        document.getElementById('container2').style.display = 'none';

        var node = parent.node;
        var me = node.player.id; // My id.

        // Create the square for the locations and score using RAPHAEL.JS
        var paper = new Raphael(document.getElementById('canvas_container'), 600, 300);
        var paper1 = new Raphael(document.getElementById('canvas_container1'), 500, 140);

        // For reference to remove it outside of function where it is defined.
        var getClickCbReference;

        console.log('LOADING PAGE SCRIPT');

        // Stop Listening.
        window.stopListening = function(settings) {
            document.getElementById('canvas_container')
                .removeEventListener("click", getClickCbReference, false);
            paper.clear();
            paper.text(150, 120, 'Esperando a que el otro jugador termine...')
                .attr({'text-anchor': 'start', 'font-size': 18});
            //                          draw_squares();
        };

        // Listen to order to stop listening for clicks.
        node.events.game.on('stop_listening', stopListening);

        // Draw Settings.
        window.mySettingsCb = function() {

            // console.log('mmmmyset');
            // console.log(settings);

            var width = node.game.settings.width;                 // The width of the square on screen
            var num_locations = node.game.settings.num_locations; // The number of locations in a row or column

            // Get the value of required variables
            var other_player = node.game.other_player;  // The other player's id

            var unicorn = node.game.unicorn;            // True if there is a unicorn; false otherwise
            var x_unicorn = node.game.x_unicorn;        // The position of the unicorn in the x axis
            var y_unicorn = node.game.y_unicorn;        // The position of the unicorn in the y axis

            var step; // The length of each small square on the paper
            step = width / num_locations;

            // Set the total score to 100%. Will diminish for each location
            // that both players checked
            var score = 1;

            var draw_squares;
            draw_squares = function() {
                paper.clear();
                paper.rect(0, 0, width, width);
                paper.rect(width * 1.15, 0, width/4, width).attr({fill: "blue"});
                paper.text(width * 1.45, width/2, "<= Puntos basados\n en lugares\n comunes")
                    .attr({'text-anchor': 'start', 'font-size': 16});

                // Create the locations
                for(var j = 0; j < width; j+=step) {
                    for(var i = 0; i < width; i+=step) {
                        paper.rect(i, j, step, step);
                    }
                }
            }; // end function draw_squares.

            // Draw the squares and the bar with points to score
            draw_squares();

            var getClickPosition;
            getClickCbReference = getClickPosition = function(e) {

                // Determine the location that is being clicked on
                var xPosition = e.clientX;
                var yPosition = e.clientY;
                var aux1 = document.getElementById('canvas_container').offsetLeft;
                var aux2 = document.getElementById('canvas_container').offsetTop;
                var location_by_x = Math.floor((xPosition - aux1) / step);
                var location_by_y = Math.floor((yPosition - aux2) / step);

                // Check that click occurs inside big square
                if (location_by_x >= num_locations) {
                    return;
                }
                if (location_by_y >= num_locations) {
                    return;
                }

                // Send info that a click occurred and where.

                // Locally.
                node.emit('checkLocation_me', [location_by_x, location_by_y]);

                // To other player.
                node.say('checkLocation_partner', other_player, [location_by_x, location_by_y]);

                // Change score proportionally to the number of locations
                // clicked by both players
                if (score > 0) {
                    // Check if location was visited by partner
                    if (node.game.where_partner[location_by_y][location_by_x] != 0) {
                        score -= 1/ (num_locations * num_locations);
                        paper.rect(width * 1.15, 0, width/4, width * (1- score)).attr({fill: "white"});
                    }
                }

                // Checking if unicorn is discovered
                found = false;
                if (unicorn == true) {
                    if (location_by_x == x_unicorn) {
                        if (location_by_y == y_unicorn) {
                            found = true;
                            paper.image('unicorn.jpg',
                                        x_unicorn * step + 1,
                                        y_unicorn * step + 1, 60, 60);
                            //paper.circle(x_unicorn * step + 0.5 * step,
                            //y_unicorn * step + 0.5 * step, 14).attr({fill: "red"});
                        }
                    }
                }

                if (found == false) {
                    // Fill the location because there is no unicorn in this location
                    var X = location_by_x * step;
                    var Y = location_by_y * step;
                    paper.text(X + step/2, Y + step/2, "Empty");
                    //paper.rect(X, Y, step, step).attr({fill: "green"});
                }
            } // end function getClickPosition

            // Listening for click on locations
            document.getElementById('canvas_container')
                .addEventListener("click", getClickPosition, false);
        };

        // Dibuja los cuadrados, los puntos basados en clicks, etc.
        node.events.stage.on('mySettings', mySettingsCb); // end node.on 'mysettings'

        window.drawScore = function(msg) {
            // Clear whatever is in there.
            paper1.clear();

            var aux = [0];
            msg = aux.concat(msg);

            // Uses only the last 20 rounds to draw the score
            if (msg.length > 20) {
                msg = msg.slice(msg.length - 20, msg.length);
            }

            // Divide rectangle according to data
            var minimo = Math.min.apply(Math,msg);
            var maximo = Math.max.apply(Math,msg);
            var ancho = 480 / (msg.length - 1);
            var alto;
            // String to define path
            var camino = 'M20 ';
            if (minimo < 0) {
                alto = 100 / (maximo - minimo);
                // Add coordinate for (0, 0)
                camino = camino + (maximo * alto + 10) + ' ';
            } else {
                alto = 100 / maximo;
                // Add coordinate for (0, 0)
                camino = camino + '110 ';
            }
            // I need first to construct the inverse path
            // in order to cheat Raphael's path-construction into
            // making a line.
            var camino_inverso = '';

            // Construct string to define paths
            for (var i = 1; i < msg.length; i++) {
                camino = camino + 'L' + (i * ancho + 20) + ' ';
                camino = camino + ((maximo - msg[i]) * alto + 10) + ' ';
                camino_inverso = ((maximo - msg[i]) * alto + 10) + ' ' + camino_inverso;
                camino_inverso = 'L' + (i * ancho + 20) + ' ' + camino_inverso;
            }
            //debugger

            paper1.rect(20, 10, 480, 100);
            paper1.text(-10, 60, 'Puntaje')
                .attr({'text-anchor': 'start', 'font-size': 10})
                .transform('r270');
            //                  paper1.text(240, 120, camino)
            paper1.text(240, 120, 'Rondas (últimas 20)')
                .attr({'text-anchor': 'start', 'font-size': 10});
            paper1.path(camino + ' ' + camino_inverso).attr({stroke: "blue"});

        };

        // Dibuja el puntaje acumulado
        node.events.game.on('DrawScore', window.drawScore); // end node.on 'DrawScore'

    } // end onload function
  </script>

</html>
